<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">

  <resource-env-ref>
    <!-- Enable Weld CDI, also needs META-INF/context.xml entry -->
    <resource-env-ref-name>BeanManager</resource-env-ref-name>
    <resource-env-ref-type>javax.enterprise.inject.spi.BeanManager</resource-env-ref-type>
  </resource-env-ref>

  <!-- Locale Filter -->
  <filter>
    <filter-name>LocaleFilter</filter-name>
    <filter-class>io.apiman.common.servlet.LocaleFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>LocaleFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- CORS Filter -->
  <filter>
    <filter-name>CorsFilter</filter-name>
    <filter-class>io.apiman.common.servlet.ApimanCorsFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>CorsFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- Disable Caching Filter -->
  <filter>
    <filter-name>NoCacheFilter</filter-name>
    <filter-class>io.apiman.common.servlet.DisableCachingFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>NoCacheFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- Transaction Watchdog -->
  <filter>
    <filter-name>TransactionWatchdog</filter-name>
    <filter-class>io.apiman.manager.api.war.TransactionWatchdogFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>TransactionWatchdog</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- Authentication Filter -->
  <filter>
    <filter-name>AuthenticationFilter</filter-name>
    <filter-class>io.apiman.common.servlet.AuthenticationFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>AuthenticationFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- Security Context Filter -->
  <filter>
    <filter-name>SecurityContext</filter-name>
    <filter-class>io.apiman.manager.api.security.impl.DefaultSecurityContextFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>SecurityContext</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- Root Resource Filter -->
  <filter>
    <filter-name>RootResourceFilter</filter-name>
    <filter-class>io.apiman.common.servlet.RootResourceFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>RootResourceFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- Bootstrapper -->
  <servlet>
    <servlet-name>BootstrapperServlet</servlet-name>
    <servlet-class>io.apiman.manager.api.war.WarApiManagerBootstrapperServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <!-- JAX-RS -->
  <servlet>
    <servlet-name>Apiman RESTEasy</servlet-name>
    <servlet-class>org.jboss.resteasy.plugins.server.servlet.HttpServlet30Dispatcher</servlet-class>
    <init-param>
      <param-name>javax.ws.rs.Application</param-name>
      <param-value>io.apiman.manager.api.rest.impl.ApiManagerApplication</param-value>
    </init-param>
    <init-param>
      <param-name>resteasy.servlet.mapping.prefix</param-name>
      <param-value>/</param-value>
    </init-param>
    <init-param>
      <param-name>resteasy.role.based.security</param-name>
      <param-value>true</param-value>
    </init-param>
    <load-on-startup>2</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>Apiman RESTEasy</servlet-name>
    <url-pattern>/*</url-pattern>
  </servlet-mapping>

  <!--
    Let Resteasy deal handle security constraints using IDM roles.
    See annotations on JAX-RS interfaces for actual enforcement rules.

    The default web.xml mechanism only supports simple servlet matching patterns, this precludes
    patterns such as /organizations/*/clients/*, which we would need.

    Endpoints not listed here should be accessible anonymously (e.g. devportal endpoints).

    Important: These are based on IDM roles, and operates as the layer before Apiman's roles and permissions system.
  -->
  <security-constraint>
    <display-name>Apiman Manager API. RESTEasy manages access constraints (see security annotations on JAX-RS interfaces)</display-name>
    <web-resource-collection>
      <web-resource-name>Actions</web-resource-name>
      <url-pattern>/actions/*</url-pattern>
      <http-method-omission>OPTIONS</http-method-omission>
    </web-resource-collection>
    <web-resource-collection>
      <web-resource-name>APIs</web-resource-name>
      <url-pattern>/apis/*</url-pattern>
      <http-method-omission>OPTIONS</http-method-omission>
    </web-resource-collection>
    <web-resource-collection>
      <web-resource-name>Developers (deprecated)</web-resource-name>
      <url-pattern>/developers/*</url-pattern>
      <http-method-omission>OPTIONS</http-method-omission>
    </web-resource-collection>
    <web-resource-collection>
      <web-resource-name>Events (experimental)</web-resource-name>
      <url-pattern>/events/*</url-pattern>
      <http-method-omission>OPTIONS</http-method-omission>
    </web-resource-collection>
    <web-resource-collection>
      <web-resource-name>Gateways</web-resource-name>
      <url-pattern>/gateways/*</url-pattern>
      <http-method-omission>OPTIONS</http-method-omission>
    </web-resource-collection>
    <web-resource-collection>
      <web-resource-name>Organizations</web-resource-name>
      <url-pattern>/organizations/*</url-pattern>
      <http-method-omission>OPTIONS</http-method-omission>
    </web-resource-collection>
    <web-resource-collection>
      <web-resource-name>Plugins</web-resource-name>
      <url-pattern>/plugins/*</url-pattern>
      <http-method-omission>OPTIONS</http-method-omission>
    </web-resource-collection>
    <web-resource-collection>
      <web-resource-name>PolicyDefs</web-resource-name>
      <url-pattern>/policydefs/*</url-pattern>
      <http-method-omission>OPTIONS</http-method-omission>
    </web-resource-collection>
    <web-resource-collection>
      <web-resource-name>Roles</web-resource-name>
      <url-pattern>/roles/*</url-pattern>
      <http-method-omission>OPTIONS</http-method-omission>
    </web-resource-collection>
    <web-resource-collection>
      <web-resource-name>Search</web-resource-name>
      <url-pattern>/search/*</url-pattern>
      <http-method-omission>OPTIONS</http-method-omission>
    </web-resource-collection>
    <web-resource-collection>
      <web-resource-name>System</web-resource-name>
      <url-pattern>/system/*</url-pattern>
      <http-method-omission>OPTIONS</http-method-omission>
    </web-resource-collection>
    <web-resource-collection>
      <web-resource-name>Users</web-resource-name>
      <url-pattern>/users/*</url-pattern>
      <http-method-omission>OPTIONS</http-method-omission>
    </web-resource-collection>
    <web-resource-collection>
      <web-resource-name>Devportal Protected (work around Tomcat not allowing anon+logged in combined endpoints)</web-resource-name>
      <url-pattern>/devportal/protected/*</url-pattern>
      <http-method-omission>OPTIONS</http-method-omission>
    </web-resource-collection>
    <auth-constraint>
      <role-name>apiuser</role-name>
      <role-name>devportaluser</role-name>
    </auth-constraint>
  </security-constraint>

  <login-config>
    <!-- The realm-name has nothing to do with the keycloak realm, it is the name of the realm if you are using tomcats own auth -->
    <auth-method>BASIC</auth-method>
    <realm-name>${env.APIMAN_AUTH_REALM:apiman}</realm-name>
  </login-config>
  <security-role>
    <role-name>apiuser</role-name>
  </security-role>
  <security-role>
    <role-name>devportaluser</role-name>
  </security-role>

</web-app>
