name: Release Workflow
on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Version being released'
        required: true
      snapshot-version:
        description: 'Next snapshot version'
        required: true
      branch:
        description: 'Branch to release from'
        required: true
        default: 'master'

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'Apiman'
    env:
      RELEASE_VERSION: ${{ github.event.inputs.release-version }}
      DEV_VERSION: ${{ github.event.inputs.snapshot-version }}
      RELEASE_BRANCH: ${{ github.event.inputs.branch }}
    steps:
      - name: Set global git
        run: |
          git config --global user.name "apiman-ci"
          git config --global user.email "ci.apiman@gmail.com"

      # Checkout all repositories we're going to use for the release
      - name: Check out Apiman
        uses: actions/checkout@v3
        with:
          repository: apiman/apiman
          ref: master
          path: 'apiman'
          lfs: true
          submodules: false
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Submodule manual step
        run: |
          cd apiman
          git submodule update --init --force --recursive
          git submodule set-branch --branch various-work-for-release -- portal/ui

      - name: Check out Apiman Plugins
        uses: actions/checkout@v3
        with:
          repository: apiman/apiman-plugins
          ref: master
          path: 'plugins'
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Check out Default API Catalog Code
        uses: actions/checkout@v3
        with:
          repository: apiman/apiman-api-catalog
          ref: master
          path: 'apiman-api-catalog'
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Check out Default Plugin Registry
        uses: actions/checkout@v3
        with:
          repository: apiman/apiman-plugin-registry
          ref: master
          path: 'apiman-plugin-registry'
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven'
          server-id: 'ossrh'
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: GPG_PASSPHRASE

      - name: Import GPG Key
        uses: crazy-max/ghaction-import-gpg@v1
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      # Update all project versions to the version # being released
      - name: Update Apiman *Parent* Release Version ${{ env.RELEASE_VERSION }} in pom.xml
        run: |
          cd apiman/parent
          mvn -ntp clean install
          mvn -ntp versions:set -DnewVersion="$RELEASE_VERSION" -DgenerateBackupPoms=false -DprocessAllModules=true
          mvn -ntp clean install

      - name: Update Apiman Release Version ${{ env.RELEASE_VERSION }} in pom.xml
        run: |
          cd apiman
          mvn -ntp -N versions:update-parent -DparentVersion="[$RELEASE_VERSION]" -DgenerateBackupPoms=false
          mvn -ntp versions:set -DnewVersion="$RELEASE_VERSION" -DgenerateBackupPoms=false -DprocessAllModules=true
          mvn -ntp clean install

      - name: Update Apiman Version in Plugins Project
        run: |
          cd plugins
          sed -i  "s/<version.apiman>.*<\/version.apiman>/<version.apiman>$RELEASE_VERSION<\/version.apiman>/g" pom.xml

      - name: Update Apiman Plugins Release Version ${{ env.RELEASE_VERSION }} in pom.xml
        run: |
          cd plugins
          mvn -ntp -N versions:update-parent -DparentVersion="[$RELEASE_VERSION]" -DgenerateBackupPoms=false
          mvn -ntp versions:set -DnewVersion="$RELEASE_VERSION" -DgenerateBackupPoms=false -DprocessAllModules=true
          mvn -ntp clean install

      - name: Commit changes for Apiman Plugin Registry
        run: |
          cd apiman-plugin-registry
          bash release.sh $RELEASE_VERSION $DEV_VERSION

      - name: Commit changes for Apiman API Catalog
        run: |
          cd apiman-api-catalog
          bash release.sh

      - name: Update Registry and Catalog links in Apiman
        run: |
          find . -name "*.properties" -exec sed -i "s|apiman-manager.api-catalog.catalog-url=https://cdn.jsdelivr.net/gh/apiman/apiman-api-catalog@master/catalog.json|apiman-manager.api-catalog.catalog-url=https://cdn.jsdelivr.net/gh/apiman/apiman-api-catalog@$RELEASE_VERSION/catalog.json|" {} \;
          find . -name "*.properties" -exec sed -i "s|apiman-manager.plugins.registries=https://cdn.jsdelivr.net/gh/apiman/apiman-plugin-registry@master/registry.json|apiman-manager.plugins.registries=https://cdn.jsdelivr.net/gh/apiman/apiman-plugin-registry@$RELEASE_VERSION/registry.json|" {} \;

      # Commit changes back to GitHub
      - name: Commit changes for Apiman Portal ${{ env.RELEASE_VERSION }}
        run: |
          cd apiman/portal/ui
          git add .
          git commit -m "Automated commit for Release Version: $RELEASE_VERSION"
          git tag -f -a -m "Tagging release $RELEASE_VERSION" $RELEASE_VERSION
          git push --atomic --tags origin $RELEASE_VERSION:various-work-for-release 

      - name: Commit & push changes for Apiman ${{ env.RELEASE_VERSION }}
        run: |
          cd apiman
          git add .
          git commit -m "Automated commit for Release Version: $RELEASE_VERSION"
          git tag -f -a -m "Tagging release $RELEASE_VERSION" $RELEASE_VERSION
          git push --atomic --tags origin $RELEASE_VERSION:master 

      - name: Commit Changes for Apiman Plugins Release Version ${{ env.RELEASE_VERSION }}
        run: |
          cd plugins
          git add .
          git commit -m "Automated commit for Release Version: $RELEASE_VERSION"
          git tag -f -a -m "Tagging release $RELEASE_VERSION" $RELEASE_VERSION
          git push --atomic --tags origin $RELEASE_VERSION:master

      # Create GitHub "release" with attached assets
      - name: Signing and Archiving the Quickstart ZIPs
        run: |
          cd apiman
          mkdir -p releases
          cp distro/wildfly/target/apiman-distro-wildfly-$RELEASE_VERSION-overlay.zip releases/.
          cp distro/vertx/target/apiman-distro-vertx-$RELEASE_VERSION.zip releases/.
          cp distro/tomcat/target/apiman-distro-tomcat-$RELEASE_VERSION-overlay.zip releases/.
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --passphrase-fd 0 --armor --detach-sign releases/apiman-distro-wildfly-$RELEASE_VERSION-overlay.zip
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --passphrase-fd 0 --armor --detach-sign releases/apiman-distro-vertx-$RELEASE_VERSION.zip
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --passphrase-fd 0 --armor --detach-sign releases/apiman-distro-tomcat-$RELEASE_VERSION-overlay.zip

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          body_path: ${{ github.workspace }}/apiman/CHANGELOG.adoc
          tag_name: ${{ github.event.inputs.release-version }}
          name: ${{ github.event.inputs.release-version }}
          prerelease: false
          files: |
            ${{ github.workspace }}/apiman/releases/apiman-distro-wildfly-$RELEASE_VERSION-overlay.zip
            ${{ github.workspace }}/apiman/releases/apiman-distro-wildfly-$RELEASE_VERSION-overlay.zip.asc
            ${{ github.workspace }}/apiman/releases/apiman-distro-vertx-$RELEASE_VERSION.zip
            ${{ github.workspace }}/apiman/releases/apiman-distro-vertx-$RELEASE_VERSION.zip.asc
            ${{ github.workspace }}/apiman/releases/apiman-distro-tomcat-$RELEASE_VERSION-overlay.zip
            ${{ github.workspace }}/apiman/releases/apiman-distro-tomcat-$RELEASE_VERSION-overlay.zip.asc

      # Deploy Apiman to Maven Central
      - name: Deploy Apiman to Maven Central
        run: |
          cd ${{ github.workspace }}/parent
          mvn deploy -B -DskipTests -Prelease
          
          cd ${{ github.workspace }}/apiman
          mvn deploy -B -DskipTests -Prelease
          
          cd ${{ github.workspace }}/plugins
          mvn deploy -B -DskipTests -Prelease
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      # Update project pom.xml files to next snapshot version and push to GH
      - name: Update Apiman Parent Next Snapshot Version ${{ env.DEV_VERSION }} in pom.xml
        run: |
          cd apiman/parent
          mvn -ntp versions:set -DnewVersion="$DEV_VERSION" -DgenerateBackupPoms=false -DprocessAllModules=true
          mvn install

      - name: Update Apiman Next Snapshot Version ${{ env.DEV_VERSION }} in pom.xml
        run: |
          cd apiman
          mvn -ntp versions:set -DnewVersion="$DEV_VERSION" -DgenerateBackupPoms=false -DprocessAllModules=true
          mvn -ntp versions:update-parent -DgenerateBackupPoms=false -DallowSnapshots=true -DparentVersion="[$DEV_VERSION]"
          find . -name "*.properties" -exec sed -i "s|apiman-manager.api-catalog.catalog-url=https://cdn.jsdelivr.net/gh/apiman/apiman-api-catalog@$RELEASE_VERSION/catalog.json|apiman-manager.api-catalog.catalog-url=https://cdn.jsdelivr.net/gh/apiman/apiman-api-catalog@master/catalog.json|" {} \;
          find . -name "*.properties" -exec sed -i "s|apiman-manager.plugins.registries=https://cdn.jsdelivr.net/gh/apiman/apiman-plugin-registry@$RELEASE_VERSION/registry.json|apiman-manager.plugins.registries=https://cdn.jsdelivr.net/gh/apiman/apiman-plugin-registry@master/registry.json|" {} \;

      - name: Update Apiman Plugins Next Snapshot Version ${{ env.DEV_VERSION }} in pom.xml
        run: |
          cd plugins
          mvn -ntp versions:set -DnewVersion="$DEV_VERSION" -DgenerateBackupPoms=false -DprocessAllModules=true
          mvn -ntp versions:update-parent -DgenerateBackupPoms=false -DallowSnapshots=true -DparentVersion="[$DEV_VERSION]"

      - name: Commit Changes for Apiman Next Snapshot Version ${{ env.DEV_VERSION }}
        run: |
          cd ${{ github.workspace }}/apiman/portal/ui
          git commit -am "Automated commit for Next Snapshot Version: $DEV_VERSION"
          git push origin --atomic HEAD:various-work-for-release
          
          cd ${{ github.workspace }}/apiman
          git commit -am "Automated commit for Next Snapshot Version: $DEV_VERSION"
          git push origin --atomic HEAD:master

      - name: Commit Changes for Apiman Plugins Next Snapshot Version ${{ env.DEV_VERSION }}
        run: |
          cd plugins
          git commit -am "Automated commit for Next Snapshot Version: $DEV_VERSION"
          git push origin --atomic HEAD:master

      - name: 'Send `apiman-release-version` repository dispatch event to `apiman/apiman-docker`'
        uses: peter-evans/repository-dispatch@v1.1.3
        with:
          token: ${{ secrets.REPO_DISPATCH_ACCESS_TOKEN }}
          repository: apiman/apiman-docker
          event-type: apiman-release-version
          client-payload: '{"release-version": "${{ github.events.inputs.release-version }}"}'
